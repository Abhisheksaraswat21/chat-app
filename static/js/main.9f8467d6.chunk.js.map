{"version":3,"sources":["components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["MyMessage","message","attachments","length","src","file","alt","className","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","trim","sendMessage","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","display","files","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","Modal","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","LoginForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f8467d6.chunk.js","sourcesContent":["const MyMessage = ({ message }) => {\r\n  //{message} written like this because it is going to take only one thing that is message\r\n  if (message?.attachments?.length > 0) {\r\n    //this means message is an image\r\n\r\n    return (\r\n      <img\r\n        src={message.attachments[0].file}\r\n        alt=\"message-attachment\"\r\n        className=\"message-image\"\r\n        style={{ float: \"right\" }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"message\"\r\n      style={{\r\n        float: \"right\",\r\n        marginRight: \"18px\",\r\n        color: \"white\",\r\n        backgroundColor: \"#3B2A50\",\r\n      }}\r\n    >\r\n      {message.text}\r\n    </div>\r\n  );\r\n};\r\nexport default MyMessage;\r\n\r\n/*\r\n\r\nmy message is a chat bubble that we senc\r\n\r\n\r\n <img\r\n        src={message.attachments[0].file}\r\n        alt=\"message-attachment\"\r\n        className=\"message-image\"\r\n        style={{ float: \"right\" }}\r\n      />\r\n      THIS WILL RENDER THE IMAGE IF OUR MESSAGE IS AN IMAGE\r\n\r\n\r\n\r\n  <div className=\"message\" style={{float:'right' , marginRight: '18px' , color: 'white' , backgroundColor: '#3B2A50'}} >\r\n agrt text message hua to us case me...send krne waale mtlb humara text right me hoga...aur bubble color background color ke naam se dia hua hai\r\n\r\n\r\n {message.text}  this is our message\r\n\r\n*/\r\n","const TheirMessage = ({ lastMessage, message }) => {\r\n  const isFirstMessageByUser =\r\n    !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  //first message kya hai user ka ye dekhne ke liye...ya to wo last messagena ho...ya fir lastmessage ke username ka naam sender ke userneame ke eqqual na ho\r\n\r\n  return (\r\n    <div className=\"message-row\">\r\n      {isFirstMessageByUser && (\r\n        <div\r\n          className=\"message-avatar\"\r\n          style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n        ></div>\r\n        //hum user ka avatar image ko put krdenge yha pe agr ye pehla message hai user ka\r\n      )}\r\n\r\n      {message.attachments && message.attachments.length > 0 ? (\r\n        //ternary operator use hua hai...agr ye attachment hai to pehla wala chalega...wrna dusra wala..just like mymessage me kia tha\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-attachment\"\r\n          className=\"message-image\"\r\n          style={{ marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\" }}\r\n        />\r\n      ) : (\r\n        <div\r\n          className=\"message\"\r\n          style={{\r\n            float: \"left\", //now messages are sent bu somebody ese...so float in left\r\n            backgroundColor: \"#CABCDC\", //bubble color\r\n            marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\",\r\n          }}\r\n        >\r\n          {message.text}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default TheirMessage;\r\n\r\n/*\r\n  \r\n  my message is a chat bubble that other peoplle send\r\n  \r\n\r\n {isFirstMessageByUser && (\r\n          <div></div>\r\n      )} \r\n      mtlb ki agr ye first message hai user ka to uske next waala div chalega\r\n\r\n  */\r\n","import { useState } from \"react\";\r\nimport { sendMessage, isTyping } from \"react-chat-engine\";\r\nimport { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n  //in starting its value is empty string\r\n\r\n  const { chatId, creds } = props;\r\n  //we are destructuring these\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    //it is done so that browser do not refresh once you submit the form\r\n\r\n    const text = value.trim(); //to cut the extra spaces\r\n\r\n    if (text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n    setValue(\"\"); //message send hone ke baad emoty string krdia taaki input box me wo hi message na dikhe\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n    //it will take the value of the input stored on clicking the button of the text\r\n\r\n    isTyping(props, chatId); //isme paas ki hai props chatid\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: \"\" });\r\n    //this is to send the image, send message is a function from chat engine\r\n    //this is for image so we emptied the text\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: \"none\" }}\r\n        onChange={handleUpload}\r\n      />\r\n\r\n      <button type=\"submit\" className=\"send-button\"></button>\r\n      <SendOutlined className=\"send-icon\" />\r\n    </form>\r\n  );\r\n};\r\nexport default MessageForm;\r\n\r\n/*\r\nhere we have all the ogic requirred to write and send mesages\r\n\r\n\r\n*/\r\n","import MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\nimport MessageForm from \"./MessageForm\";\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) =>\r\n    chat.people.map(\r\n      (person, index) =>\r\n        person.last_read === message.id && (\r\n          <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n              float: isMyMessage ? \"right\" : \"left\",\r\n              backgroundImage:\r\n                person.person.avatar && `url(${person.person.avatar})`,\r\n            }}\r\n          />\r\n        )\r\n    );\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: \"100%\" }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage ? (\r\n              <MyMessage message={message} />\r\n            ) : (\r\n              <TheirMessage\r\n                message={message}\r\n                lastMessage={messages[lastMessageKey]}\r\n              />\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"read-receipts\"\r\n            style={{\r\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\r\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\r\n            }}\r\n          >\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: \"100px\" }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst projectID = \"1b7801d6-8a66-4be4-a442-89219d833dfc\";\r\n\r\nconst Modal = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const authObject = {\r\n      \"Project-ID\": projectID,\r\n      \"User-Name\": username,\r\n      \"User-Secret\": password,\r\n    };\r\n\r\n    try {\r\n      // username / password => chatengine -> if exists it will give message\r\n\r\n      await axios.get(\"https://api.chatengine.io/chats\", {\r\n        headers: authObject,\r\n      });\r\n\r\n      //works out -> logged in\r\n\r\n      localStorage.setItem(\"username\", username);\r\n      localStorage.setItem(\"password\", password);\r\n\r\n      window.location.reload();\r\n      setError(\"\");\r\n    } catch (err) {\r\n      //error -> try with new username\r\n      setError(\"Oops, incorrect credentials.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"form\">\r\n        <h1 className=\"title\">Abhi Chat</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"Username\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Start chatting</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <h1>{error}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { ChatEngine } from \"react-chat-engine\";\n\nimport \"./App.css\";\n\nimport ChatFeed from \"./components/ChatFeed\";\n\nimport LoginForm from \"./components/LoginForm\";\n\nconst App = () => {\n  if (!localStorage.getItem(\"username\")) return <LoginForm />;\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID=\"0b81b679-c67f-46de-a62c-e38144e2c143\"\n      userName={localStorage.getItem(\"username\")}\n      userSecret={localStorage.getItem(\"password\")}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  );\n};\n\nexport default App;\n\n/*\n    <ChatEngine //chatengine us a component...so it starts with a capital letter\n\n      renderChatFeed={(chatAppProps) => <ChatFeed ...chatAppProps />}\nchatappprops me we are getting the components that have something to do with chat app\n...chatAppProps we aree speradin all the components we are getting from chats\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}